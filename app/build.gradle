plugins {
    id 'application'

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'

    //JaCoCo
    id 'jacoco'

    //IDEA plugin for exporting libs/dependencies to IDE
    id 'idea'

    //Flyway, migration tool
    id("org.flywaydb.flyway") version "7.3.0"

}

//Spek
apply plugin: "org.junit.platform.gradle.plugin"
//Kotlin
apply plugin: "kotlin"
//JUnit plugin for Gradle
apply plugin: "org.junit.platform.gradle.plugin"

group 'org.example'
version '1.0'

application {
    applicationName("app")
    mainClassName = "Main"
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.20'

    //Logger
    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'

    //Parser
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-cli-jvm', version: '0.3'

    //h2db
    implementation "com.h2database:h2:1.4.200"

    //FlyWay
    implementation 'org.flywaydb:flyway-core:7.12.1'

    //Spek
    testCompile 'org.jetbrains.spek:spek-api:1.1.5'
    testCompile 'org.jetbrains.kotlin:kotlin-test:1.4.20'
    testCompile 'org.jetbrains.kotlin:kotlin-reflect:1.4.20'
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'

    //Mockito
    testImplementation 'org.mockito:mockito-core:3.11.2'

    //JUnit
    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

// To make JUnit use Spek as test engine
junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport // launches JaCoCo after tests
    jacoco {
        destinationFile = file("$buildDir/jacoco/junitPlatformTest.exec")
    }
}

//JaCoCo
jacoco {
    toolVersion = "0.8.7"
    applyTo junitPlatformTest
}

junitPlatformTest {
    jacoco {
        // Tells JUnit to output its test execution data here.
        destinationFile = file("$buildDir/jacoco/JUnitPlatformTest.exec")
    }
    finalizedBy jacocoTestReport // launches JaCoCo after tests
    jacoco {
        destinationFile = file("$buildDir/jacoco/junitPlatformTest.exec")
    }
}

//Report is formed only in .html
jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        html.enabled true
        xml.enabled true
    }
}

task applicationCodeCoverageReport(type: JacocoReport) {
    executionData run
}

//To include all libs into one jar
jar {
    manifest {
        attributes 'Main-Class': 'Main'
    }
    archiveClassifier = 'fat-jar'
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// tests are required to run before generating the report
jacocoTestReport {
    dependsOn test
}